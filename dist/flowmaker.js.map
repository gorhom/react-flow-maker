{"version":3,"file":"flowmaker.js","sources":["../src/logic.js","../src/utils.js","../src/flowTree.js","../src/icons.js","../src/addbutton.js","../src/tooltip.js","../src/input.js","../src/block.js","../src/graphPart.js","../flowmaker.js"],"sourcesContent":["export default class Logic {\n  constructor() {\n    this.conf = {\n      components: {},\n      introComponents: [],\n    }\n    this.errors = []\n  }\n  title(compoentName) {\n    return this.conf.components[compoentName].title\n  }\n  get() {\n    return this.conf\n  }\n  parseNewLogic(input) {\n    const outErrs = []\n    const warn = (...data) => {\n      outErrs.push(data.join(' '))\n      console.log(\"logic parse warning:\", ...data)\n    }\n\n    let conf = {\n      components: {},\n      introComponents: [],\n    }\n\n    if (input.components) {\n      if (Array.isArray(input.components)) {\n        input.components.map((component, i) => {\n          if (!component.name || !component.title) {\n            warn(`logic.components[${i}] does not have a name or title field, this component will be ignored`)\n            return\n          }\n          \n          const alreadyUsedNames = []\n\n          let toInsert = {\n            name: component.name,\n            title: component.title,\n            next: component.next ? Array.isArray(component.next) ? component.next : [component.next] : [],\n            tooltip: component.tooltip,\n            inputs: [],\n            advancedInputs: [],\n          }\n\n          if (Array.isArray(component.inputs)) {\n            component.inputs.map((input, inputID) => {\n              if (!input.title || !input.name || !input.type) {\n                warn(`logic.components[${i}].inputs[${inputID}] does not have a name, type or title field, this input will be ignored`)\n                return\n              }\n\n              if (typeof input.validation != 'function' && typeof input.validation != 'undefined') {\n                warn(`logic.components[${i}].inputs[${inputID}].validation must be undefined or a function`)\n                return\n              }\n              \n              if (typeof input.tooltip != 'string' && input.tooltip !== undefined) {\n                warn(`logic.components[${i}].inputs[${inputID}].tooltip must be a string or not undefined`)\n                return\n              }\n\n              if (alreadyUsedNames.indexOf(input.name) != -1) {\n                warn(`logic.components[${i}].inputs[${inputID}].name can't be equal to other names`)\n                return\n              }\n\n              let toReturn = {\n                name: input.name,\n                title: input.title,\n                type: input.type,\n                validation: input.validation,\n                tooltip: input.tooltip,\n                default: input.default,\n              }\n\n              switch (input.type) {\n                case 'text':\n                  if (typeof input.default != 'string' && input.default !== undefined) {\n                    warn(`logic.components[${i}].inputs[${inputID}].default must be a string or undefined, using default empty string`)\n                    toReturn.default = ''\n                  }\n                  if (input.default == undefined) {\n                    toReturn.default = ''\n                  }\n                  break;\n                case 'number':\n                  if (typeof input.default != 'number' && input.default !== undefined) {\n                    warn(`logic.components[${i}].inputs[${inputID}].default must be a number or undefined, using default 0`)\n                    toReturn.default = 0\n                  }\n                  if (input.default == undefined) {\n                    toReturn.default = 0\n                  }\n                  break;\n                case 'switch':\n                  if (typeof input.default != 'boolean' && input.default !== undefined) {\n                    warn(`logic.components[${i}].inputs[${inputID}].default must be a boolean or undefined, using default empty string`)\n                    toReturn.default = false\n                  }\n                  if (input.default == undefined) {\n                    toReturn.default = false\n                  }\n                  break;\n                case 'dropdown':\n                  if (!Array.isArray(input.options)) {\n                    warn(`logic.components[${i}].inputs[${inputID}].options is not defined or is not an array, skipping this item`)\n                    return\n                  } else {\n                    toReturn['options'] = input.options.map((option, optionID) => {\n                      if (typeof option.title != 'string' || typeof option.value != 'string' || (typeof option.tooltip != 'string' && option.tooltip != undefined)) {\n                        warn(`logic.components[${i}].inputs[${inputID}].options[${optionID}] does not have the correct items (title string, value string, tooltip string), skipping this item`)\n                        return\n                      }\n                      return {\n                        title: option.title,\n                        tooltip: option.tooltip,\n                        value: option.value,\n                      }\n                    }).filter(item => item)\n                  }\n                  break;\n                default:\n                  warn(`logic.components[${i}].inputs[${inputID}].type = '${input.type}' is not valid, this input will be ignored`)\n                  return\n              }\n\n              alreadyUsedNames.push(input.name)\n              toInsert[input.advanced ? 'advancedInputs' : 'inputs'].push(toReturn)\n              return\n            })\n          }\n\n          conf.components[component.name] = toInsert\n        })\n        Object.keys(conf.components).map(key => {\n          conf.components[key].next = conf.components[key].next.filter(componentKey => {\n            if (conf.components[componentKey]) {\n              return true\n            }\n            warn(`logic.component[???].next contains '${componentKey}' that does not exsist, this item will be ignored`)\n            return false\n          })\n        })\n      } else {\n        warn(`logic.components is not an array`) \n      }\n    }\n\n    if (input.introComponents) {\n      if (Array.isArray(input.introComponents)) {\n        input.introComponents.map(name => {\n          if (conf.components[name]) {\n            conf.introComponents.push(name)\n          } else {\n            warn(`logic.introComponents['${name}'] is not a known component`) \n          }\n        })\n      } else if (typeof input.introComponents == 'string') {\n        if (conf.components[input.introComponents]) {\n          conf.introComponents.push(input.introComponents)\n        } else {\n          warn(`logic.introComponents = '${name}' is not a known component`) \n        }\n      } else {\n        warn(`logic.introComponents is not an array or string`) \n      }\n    }\n\n    this.errors = outErrs\n    this.conf = conf\n    return conf\n  }\n}\n","export default {\n  RandomString(length) {\n    let text = \"\";\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  \n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    \n    return text;\n  }\n}\n","import utils from './utils'\n\nexport default class Tree {\n  constructor(Logic, FlowMaker) {\n    this.Logic = Logic\n    this.FlowMaker = FlowMaker\n    this.maxDepth = 0\n    this.flow = []\n    \n    this.exportBuzzy = false\n    this.reExport = false\n\n    this.exportFunc = undefined\n  }\n\n  setExportFunc(func) {\n    this.exportFunc = func\n  }\n\n  caclMaxDepth() {\n    const vm = this\n    this.maxDepth = 0\n\n    const loopOverNext = next => {\n      next.map(item => {\n        if (item.depth > vm.maxDepth) {\n          vm.maxDepth = item.depth\n        }\n        loopOverNext(item.next)\n      })\n    }\n    loopOverNext(this.flow)\n\n    this.FlowMaker.forceUpdate()\n  }\n\n  flowItem(component, lastIds, currentDepth) {\n    const id = utils.RandomString(20)\n    return {\n      depth: currentDepth + 1,\n      next: [],\n      id: id,\n      path: [...lastIds, id],\n      inputData: {},\n      inputValidation: {},\n      component,\n    }\n  }\n\n  startFlow(componentName) {\n    let component = this.Logic.conf.components[componentName]\n    if (!component) {\n      return\n    }\n\n    this.flow.push(this.flowItem(component, [], 0))\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  addComponent(componentName, path) {\n    let component = this.Logic.conf.components[componentName]\n    if (!component) {\n      return\n    }\n\n    let toAppendOn = this.findPath(path)\n    toAppendOn.next.push(this.flowItem(component, toAppendOn.path, toAppendOn.depth))\n\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  findPath(path) {\n    let toReturn = undefined\n    const loopOverNext = next => {\n      for (let i = 0; i < next.length; i++) {\n        if (next[i].path === path) {\n          toReturn = next[i]\n          break\n        }\n        loopOverNext(next[i].next)\n      }\n    }\n    loopOverNext(this.flow)\n    return toReturn\n  }\n\n  removeComponent(path) {\n    const loopOverNext = next => {\n      next = Object.assign([], next)\n      for (let i = 0; i < next.length; i++) {\n        if (next[i].path === path) {\n          next.splice(i, 1)\n          break\n        }\n        next[i].next = loopOverNext(next[i].next) \n      }\n      return next\n    }\n    this.flow = loopOverNext(this.flow)\n\n    this.caclMaxDepth()\n    this.export()\n  }\n\n  export() {\n    if (!this.exportBuzzy) {\n      this.exportBuzzy = true\n      \n      setTimeout(() => {\n        if (this.reExport) {\n          this.exportBuzzy = false\n          this.reExport = false\n          this.export()\n          return\n        }\n\n        let toExport = []\n      \n        const mapOverNext = (posInExpo, next) => {\n          next.map(item => {\n            let inputs = {}\n            let inputErrors = {}\n\n            Object.keys(item.inputData).map(i => {\n              inputs[i] = item.inputData[i].value\n              if (item.inputData[i].error) {\n                inputErrors[i] = item.inputData[i].error\n              }\n            })\n\n            const componentName = item.component.name\n            posInExpo.push({\n              component: {\n                title: item.component.title,\n                name: item.component.name\n              },\n              inputs,\n              inputErrors,\n              id: item.id,\n              next: [],\n            })\n            mapOverNext(posInExpo[posInExpo.length-1].next, item.next)\n          })\n        } \n\n        mapOverNext(toExport, this.flow)\n\n        if (typeof this.exportFunc == 'function') {\n          this.exportFunc(toExport)\n        }\n\n        setTimeout(() => {\n          this.exportBuzzy = false\n          if (this.reExport) {\n            this.reExport = false\n            this.export()\n          }  \n        }, 30)\n      }, 50)\n    } else {\n      this.reExport = true\n    }\n  }\n\n  import(flow) {\n    if (!Array.isArray(flow)) {\n      return\n    }\n\n    let newFlow = []\n\n    const mapOverFlow = (arr, mapTo, lastIds) => {\n      arr.map(item => {\n        let toPush = this.flowItem(this.Logic.conf.components[item.component.name], lastIds, lastIds.length)\n        \n        toPush.id = item.id\n        toPush.inputData = Object.keys(item.inputs).reduce((acc, i) => {\n          acc[i] = {\n            value: item.inputs[i],\n            error: ''\n          }\n          return acc\n        }, {})\n        toPush.path.splice(-1,1)\n        toPush.path.push(item.id)\n        mapTo.push(toPush)\n\n        mapOverFlow(item.next, mapTo[mapTo.length-1].next, [...lastIds, item.id])\n      })\n    }\n    mapOverFlow(flow, newFlow, [])\n\n    this.flow = newFlow\n    this.caclMaxDepth()\n  }\n\n  updateInputValue(path, value, field, isAdvanced) {\n    let component = this.findPath(path)\n\n    if (component) {\n      if (!isAdvanced) {\n        if (component.component.inputs && component.component.inputs[field]) {\n          const input = component.component.inputs[field]\n          component.inputData[input.name] = value\n        }\n      } else {\n        if (component.component.advancedInputs && component.component.advancedInputs[field]) {\n          const input = component.component.advancedInputs[field]\n          component.inputData[input.name] = value\n        }\n      }\n    }\n\n    this.export()\n  }\n} \n","import React from 'react'\n\nexport const Add = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\nexport const Delete = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v10zM18 4h-2.5l-.71-.71c-.18-.18-.44-.29-.7-.29H9.91c-.26 0-.52.11-.7.29L8.5 4H6c-.55 0-1 .45-1 1s.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1z\"/></svg>\nexport const DropDown = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M8.71 11.71l2.59 2.59c.39.39 1.02.39 1.41 0l2.59-2.59c.63-.63.18-1.71-.71-1.71H9.41c-.89 0-1.33 1.08-.7 1.71z\"/></svg>\nexport const DropUp = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M8.71 12.29L11.3 9.7c.39-.39 1.02-.39 1.41 0l2.59 2.59c.63.63.18 1.71-.71 1.71H9.41c-.89 0-1.33-1.08-.7-1.71z\"/></svg>\nexport const Info = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 15c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1s1 .45 1 1v4c0 .55-.45 1-1 1zm1-8h-2V7h2v2z\"/></svg>\nexport const Check = () => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/></svg>\nexport const Alert = () => <svg className=\"flow-alertIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"17\"></line></svg>\n","import React from 'react'\nimport {Add} from './icons'\n\nexport default class AddButton extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      open: false,\n    }\n  }\n  clickRoundButton() {\n    this.setState({\n      open: !this.state.open,\n    })\n  }\n  clickOption(option) {\n    this.props.out(option)\n    this.setState({\n      open: false\n    })\n  }\n  render() {\n    const p = this.props\n    const s = this.state\n    return (\n      <div className=\"flow-addIcon\">\n        <div className={`flow-round ${s.open ? 'flow-open' : 'flow-closed'}`} onClick={() => this.clickRoundButton()}>\n          <Add/>\n        </div>\n        <div className={`flow-options ${s.open ? 'flow-open' : 'flow-closed'}`}>\n          {p.options ? p.options.map((option, id) => \n            <div onClick={() => this.clickOption(option)} key={id} className=\"flow-option\">\n              {this.props ? this.props.Logic.title(option) : option}\n            </div>\n          ):''}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport {Info} from './icons'\n\nexport default class ToolTip extends React.Component {\n  render() {\n    if (!this.props.tip) {\n      return ''\n    }\n\n    return (\n      <div className={`flow-tooltip flow-transparrent${this.props.transparrent ? 'True' : 'False'}`}>\n        <div className=\"flow-icon\">\n          <Info/>\n        </div>\n        <div className=\"flow-noWidth\">\n          <div className=\"flow-fullwidth\">\n            <div className=\"flow-popup\">\n              {this.props.tip}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport {DropDown, Check} from './icons'\nimport ToolTip from './tooltip'\n\nexport default class Input extends React.Component {\n  constructor() {\n    super()\n    this.refID = \"\"\n    this.state = {\n      value: '',\n      error: '',\n      dropDownSelected: -1,\n      isAfterInit: false,\n      dropDownopen: false,\n    }\n  }\n\n  tellParent() {\n    if (this.props.onChange) {\n      this.props.onChange({\n        error: this.state.error,\n        value: this.state.value,\n      })\n    }\n  }\n\n  updateDefaultVal() {\n    if ((this.props.input && !this.state.isAfterInit) || this.refID != this.props.refID) {\n      this.refID = this.props.refID\n      const defaultInput = typeof this.props.initalVal != 'undefined' ? this.props.initalVal : this.props.input.default\n\n      this.setState({\n        value: defaultInput,\n        isAfterInit: true,\n      }, () => {\n        this.validate(defaultInput, () => {\n          if (this.props.input.type == 'dropdown' && this.state.dropDownSelected == -1) {\n            let dropDownSelected = 0\n            this.props.input.options.map((option, id) => {\n              if (option.value == defaultInput) {\n                dropDownSelected = id\n              }\n            })\n            this.setState({\n              dropDownSelected\n            })\n          }\n          this.tellParent()\n        })\n      })\n    }\n  }\n\n  validate(newVal, cb) {\n    if (typeof this.props.input.validation == 'function') {\n      let error = this.props.input.validation(undefined, newVal)\n      if (typeof error != 'string') {\n        error = ''\n      }\n      this.setState({\n        error\n      }, cb)\n    }\n    if (typeof cb == 'function') {\n      cb()\n    }\n  }\n\n  updateValue(newVal) {\n    this.setState({value: newVal}, () => {\n      this.validate(newVal, () => {\n        this.tellParent()\n      })\n    })\n  }\n\n  componentDidMount() {\n    this.updateDefaultVal()\n  }\n\n  componentDidUpdate() {\n    this.updateDefaultVal()\n    if (this.props.hiddenDropdown && this.state.dropDownopen) {\n      this.setState({\n        dropDownopen: false,\n      })\n    }\n  }\n  \n  render() {\n    const error = this.state.error\n    const input = this.props.input\n    let inputEl\n    if (!input) {\n      return (<div className=\"flow-input\"></div>)\n    }\n\n    const Label = () => <div className=\"flow-label\" onClick={() => inputEl ? inputEl.focus() : input.type == 'switch' ? this.updateValue(!this.state.value) : ''}>\n        <span>{input.title}</span>\n        <ToolTip transparrent={true} tip={input.tooltip}/>\n      </div>\n\n    return (\n      <div className={`flow-input flow-input-type-${input.type} flow-hasErr${error ? 'True' : 'False'}`}>\n        {input.type != 'switch' ? <Label/> : ''}\n        <div className=\"flow-actualInput\">\n          {(input.type == 'text' || input.type == 'number')?\n            <div className=\"flow-text\">\n              <input ref={el => inputEl = el} type={input.type} value={this.state.value} onChange={e => this.updateValue(e.target.value)}/>\n            </div>\n          :input.type == 'switch'?\n            <div className=\"flow-switch\">\n              <div \n                onClick={() => this.updateValue(!this.state.value)} \n                className={`flow-actualSwitch ${this.state.value ? 'flow-true' : 'flow-false'}`}\n              ><div className=\"flow-inside\"><Check/></div></div>\n            </div>\n          :input.type == 'dropdown'?\n            <div className=\"flow-dropdown\">\n              <div className=\"flow-select\" onClick={() => this.setState({dropDownopen: !this.state.dropDownopen})}>\n                <div className=\"flow-optTitle\">\n                  {this.state.dropDownSelected == -1 || !input.options || input.options.length == 0\n                    ? '...' \n                    : input.options[this.state.dropDownSelected].title\n                  }\n                </div>\n                <div className=\"flow-icon\">\n                  {!input.options || input.options.length == 0 ? '' : <DropDown/>}\n                </div>\n              </div>\n              <div className={`flow-options flow-open${this.state.dropDownopen ? 'True' : 'False'}`}>\n                {input.options.map((option, optionID) => \n                  <div \n                    key={optionID} \n                    className=\"flow-option\"\n                    onClick={() => {\n                      this.updateValue(option.value)\n                      this.setState({\n                        dropDownSelected: optionID,\n                        dropDownopen: false,\n                      })\n                    }}\n                  >\n                    <div className=\"flow-optTitle\">{option.title}</div>\n                    <ToolTip tip={option.tooltip}/>\n                  </div>\n                )}\n              </div>\n            </div>\n          :''}\n        </div>\n        {input.type == 'switch' ? <Label/> : ''}\n        {error?\n          <div className=\"flow-error\">{error}</div>\n        :''}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport Input from './input'\nimport {Delete, Add, DropDown, DropUp, Alert} from './icons'\nimport ToolTip from './tooltip'\n\nexport default class Block extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      hover: false,\n      showAddOptions: false,\n      showAdvanced: false,\n    }\n\n    this.remove = this.remove.bind(this)\n  }\n  remove() {\n    this.props.graphInstance.props.Tree\n    .removeComponent(this.props.graphInstance.props.data.path)\n  }\n  add() {\n\n    if (this.props.graphInstance.props.data.component.next.length == 1) {\n      this.realAdd(this.props.graphInstance.props.data.component.next[0])\n      return\n    }\n\n    this.setState({\n      showAddOptions: true,\n    })\n  }\n  realAdd(toAdd) {\n    this.setState({\n      showAddOptions: false,\n    })\n\n    if (!toAdd) {\n      return\n    }\n\n    this.props.graphInstance.props.Tree.addComponent(toAdd, this.props.graphInstance.props.data.path)\n  }\n  render() {\n    const data = this.props.graphInstance.props.data\n    if (!data) {\n      return ''\n    }\n    const comp = data.component\n    const inputs = comp.inputs\n    const advancedInputs = comp.advancedInputs\n\n    return (\n      <div \n        className={`flow-fullBlock flow-hover${this.state.hover && !this.state.showAddOptions ? 'True' : 'False'}`}\n        onMouseOver={() => {\n          if (!this.state.hover) {\n            this.setState({hover: true})\n          }\n        }}\n        onMouseOut={() => {\n          if (this.state.hover) {\n            this.setState({hover: false})\n          }\n        }}\n      >\n        <div className=\"flow-side\">\n          <div className=\"flow-innerSide\">\n            <div className=\"flow-round\" onClick={this.remove}>\n              <Delete/>\n            </div>\n          </div>\n        </div>\n        <div className=\"flow-middle\">\n          <div className=\"flow-title\">{comp.title}<ToolTip transparrent={true} tip={comp.tooltip}/></div>\n          <div className=\"flow-inputs\">\n            {\n              inputs.map((input, inputID) => {\n                const inputData = data.inputData[input.name]\n                return (\n                  <Input\n                    refID={data.id}\n                    key={inputID}\n                    input={input}\n                    initalVal={inputData ? inputData.value : undefined}\n                    onChange={inputData => {\n                      this.props.graphInstance.props.Tree\n                      .updateInputValue(data.path, inputData, inputID, false)\n                    }}\n                  />\n                )\n              })\n            }\n            {advancedInputs.length > 0 ?\n              (() => {\n                const hasErrors = advancedInputs.filter(el => (data.inputData[el.name] && el.validation ? el.validation(undefined, data.inputData[el.name].value) : true) !== true).length > 0\n                const showHasErrors = hasErrors && !this.state.showAdvanced\n                return (\n                  <div className=\"flow-showAdvanced\">\n                    <div \n                      className={`flow-button error${showHasErrors ? 'True' : 'False'}`}\n                      onClick={() => {\n                        this.setState({showAdvanced: !this.state.showAdvanced}, () => {\n                          if (this.props.graphParrentInstance) {\n                            this.props.graphParrentInstance.forceUpdate()\n                          } else if (this.props.graphInstance) {\n                            this.props.graphInstance.forceUpdate()\n                          }\n                        })\n                      }}\n                    >{showHasErrors ? <Alert/> : ''}Advanced {this.state.showAdvanced ? <DropUp/> : <DropDown/>}</div>\n                  </div>\n                )\n              })()\n            :''}\n          </div>\n          <div className={`flow-inputs flow-advancedInputs flow-show${this.state.showAdvanced ? 'True' : 'False'}`}>\n            {advancedInputs.map((input, inputID) => {\n              const inputData = data.inputData[input.name]\n              return (\n                <Input\n                  hiddenDropdown={!this.state.showAdvanced}\n                  key={inputID}\n                  input={input}\n                  initalVal={inputData ? inputData.value : undefined}\n                  onChange={inputData => {\n                    this.props.graphInstance.props.Tree\n                    .updateInputValue(data.path, inputData, inputID, true)\n                  }}\n                />\n              )\n            })}\n          </div>\n        </div>\n        {comp.next.length > 0 ?\n          <div className={`flow-nextOptions flow-show${this.state.showAddOptions ? 'True' : 'False'}`}>\n            <div className=\"flow-closePopup\" onClick={() => this.realAdd()}>\n              <Add/>\n            </div>\n            <div className=\"flow-pos\">\n              <div className=\"flow-optionsTitle\">Options</div>\n              {comp.next.map((componentName, key) => \n                <div \n                  onClick={() => this.realAdd({componentName})} \n                  className=\"flow-option\" \n                  key={key}\n                >{this.props ? this.props.graphInstance.props.Logic.title(componentName) : componentName}</div>\n              )}\n            </div>\n          </div>\n        :''}\n        {comp.next.length > 0 ?\n          <div className=\"flow-side\">\n            <div className=\"flow-innerSide\">\n              <div className=\"flow-round\" onClick={() => this.add()}>\n                <Add/>\n              </div>\n            </div>\n          </div>\n        :''}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport Block from './block'\n\nconst GraphPartClass = class GraphPart extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      element: undefined,\n      lastParentPosition: 0,\n    }\n    \n    this.mounted = false\n  }\n\n  componentDidMount() {\n    this.mounted = true\n    this.watchParent()\n  }\n\n  componentWillUnmount() {\n    this.mounted = false\n  }\n\n  watchParent() {\n    if (this.mounted) {\n      let parentEl = this.props.connectTo\n      let parent = undefined\n      if (parentEl) {\n        parent = parentEl.getBoundingClientRect()\n        if (parent.top != this.state.lastParentPosition) {\n          this.setState({\n            lastParentPosition: parent.top\n          })\n        }\n      }\n      setTimeout(() => {\n        this.watchParent()\n      }, 800)\n    }\n  }\n\n  render() {\n    let parentLineHeight = 0\n    let parentLineToTop = 0\n    let type = ''\n\n    if (this.props.connectTo && this.state.element) {\n      let parent = this.props.connectTo.getBoundingClientRect()\n      let child = this.state.element.getBoundingClientRect()\n      let spaceBetween = (parent.y + (parent.height / 2)) - (child.y + (child.height / 2))  \n\n      if (spaceBetween == 0) {\n        parentLineHeight = 20\n        parentLineToTop = 10\n        type = 'straight'\n      } else if (spaceBetween < 0) {\n        parentLineHeight = ((-spaceBetween) + 20)\n        parentLineToTop = parentLineHeight - 10\n        type = 'bottomToTop'\n      } else {\n        parentLineHeight = spaceBetween + 20\n        parentLineToTop = 10\n        type = 'topToBottom'\n      }\n    }\n    return (\n      <div className=\"flow-graphPart\" style={{width: this.props.width}}>\n        {parentLineHeight && parentLineToTop && type ?\n          <div className=\"flow-lineToParrent\" style={{bottom: `${parentLineToTop}px`}}>\n            <svg viewBox={`0 0 80 ${parentLineHeight}`} height={`${parentLineHeight}px`} style={{minHeight: `${parentLineHeight}px`}} xmlns=\"http://www.w3.org/2000/svg\">\n              { type == 'bottomToTop' ?\n                <path\n                  strokeWidth=\"7\" \n                  stroke=\"#ccc\" \n                  strokeLinecap=\"round\" \n                  fill=\"none\" \n                  d={`M0,10 C70,10 30,${parentLineHeight-10} 80,${parentLineHeight-10}`}\n                />\n              : type == 'topToBottom' ?\n                <path \n                  strokeWidth=\"7\" \n                  stroke=\"#ccc\" \n                  strokeLinecap=\"round\" \n                  fill=\"none\" \n                  d={`M0,${parentLineHeight-10} C70,${parentLineHeight-10} 30,10 80,10`}\n                />\n              : \n                <path \n                  strokeWidth=\"7\" \n                  stroke=\"#ccc\" \n                  strokeLinecap=\"round\" \n                  fill=\"none\" \n                  d=\"M0,10 C70,10 30,10 80,10\"\n                />\n              }\n            </svg>\n          </div>\n        :''}\n        <div\n          ref={element => {\n            \n            let parentEl = this.props.connectTo\n            let parent = undefined\n            if (parentEl) {\n              parent = parentEl.getBoundingClientRect()\n            }\n\n            if (typeof this.state.element == 'object') {\n              if (!parent || parent.top == this.state.lastParentPosition) {\n                return\n              }\n            }\n\n            let toUpdate = {\n              element,\n            }\n\n            if (parent) {\n              toUpdate.lastParentPosition = parent.top\n            }\n\n            this.setState(toUpdate)\n          }} \n          className=\"flow-graph\" \n          style={{minWidth: this.props.itemWidth}}\n        >\n          <Block \n            graphInstance={this} \n            graphParrentInstance={this.props.connectToInstance}\n          />\n        </div>\n        <div className=\"flow-next\">\n          {this.props.data.next.map((item, i) => \n            <GraphPartClass \n              Tree={this.props.Tree} \n              Logic={this.props.Logic} \n              connectTo={this.state.element}\n              connectToInstance={this}\n              width={this.props.width - this.props.itemWidth} \n              itemWidth={this.props.itemWidth}\n              key={i} \n              data={item}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GraphPartClass\n","import React from 'react'\nimport './style.styl'\nimport Logic from './src/logic'\nimport Tree from './src/flowTree'\nimport AddButton from './src/addbutton'\nimport GraphPart from './src/graphPart'\nimport sha1 from 'js-sha1'\n\nexport default class FlowMaker extends React.Component {\n  constructor() {\n    super()\n\n    this.Logic = new Logic()\n    this.Tree = new Tree(this.Logic, this)\n\n    this.lastlogicHash = ''\n    this.state = {\n      settings: this.Logic.get(),\n    }\n  }\n\n  componentDidMount() {\n    const newHash = sha1(this.props.logic)\n    if (newHash != this.lastlogicHash) {\n      this.lastlogicHash = newHash\n      this.setState({\n        settings: this.Logic.parseNewLogic(this.props.logic)\n      }, () => this.afterMount())\n    } else {\n      this.afterMount()\n    }\n  }\n\n  afterMount() {\n    if (typeof this.props.onChange == 'function')\n      this.Tree.setExportFunc(this.props.onChange)\n    if (typeof this.props.flow == 'object')\n      this.Tree.import(this.props.flow)\n  }\n\n  render() {\n    const s = this.state.settings\n\n    return (\n      <div className=\"flowMakerComp\">\n        <div className=\"flowMakerContainer\" style={{minWidth: `${250 + (380 * this.Tree.maxDepth)}px`}}>\n          <div className=\"flow-row\" style={{minWidth: '250px'}}>\n            {s.introComponents.length > 0 ?\n              <div className=\"flow-startPoint\">\n                <h3>Start here</h3>\n                <AddButton\n                  Tree={this.Tree}\n                  Logic={this.Logic}\n                  options={s.introComponents}\n                  out={componentName => this.Tree.startFlow(componentName)}\n                />\n              </div>\n            :''}\n          </div>\n\n          <div className=\"flow-actualGraph\" style={{width: `${380 * this.Tree.maxDepth}px`}}>\n            {this.Tree.flow.map((item, i) => \n              <GraphPart\n                Tree={this.Tree} \n                Logic={this.Logic}\n                width={380 * this.Tree.maxDepth}\n                itemWidth={380} \n                key={i} \n                data={item}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"],"names":["Logic","constructor","conf","errors","title","compoentName","this","components","get","parseNewLogic","input","outErrs","warn","push","data","join","log","Array","isArray","map","component","i","name","alreadyUsedNames","toInsert","next","tooltip","inputs","inputID","type","validation","undefined","indexOf","toReturn","default","options","option","optionID","value","filter","item","advanced","Object","keys","key","componentKey","introComponents","Tree","FlowMaker","maxDepth","flow","exportBuzzy","reExport","exportFunc","setExportFunc","func","caclMaxDepth","vm","loopOverNext","depth","forceUpdate","flowItem","lastIds","currentDepth","id","length","text","possible","charAt","Math","floor","random","utils","path","startFlow","componentName","export","addComponent","toAppendOn","findPath","let","removeComponent","assign","splice","toExport","mapOverNext","posInExpo","inputErrors","inputData","error","import","newFlow","mapOverFlow","arr","mapTo","toPush","reduce","acc","updateInputValue","field","isAdvanced","advancedInputs","const","Add","React","xmlns","width","height","viewBox","d","fill","Delete","DropDown","DropUp","Info","Check","Alert","className","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","AddButton","state","open","clickRoundButton","setState","clickOption","props","out","render","p","s","onClick","Component","ToolTip","tip","transparrent","Input","refID","dropDownSelected","isAfterInit","dropDownopen","tellParent","onChange","updateDefaultVal","defaultInput","initalVal","validate","newVal","cb","updateValue","componentDidMount","componentDidUpdate","hiddenDropdown","inputEl","Label","focus","ref","el","e","target","Block","hover","showAddOptions","showAdvanced","remove","bind","graphInstance","add","realAdd","toAdd","showHasErrors","comp","onMouseOver","onMouseOut","graphParrentInstance","GraphPartClass","element","lastParentPosition","mounted","watchParent","componentWillUnmount","parentEl","connectTo","parent","getBoundingClientRect","top","setTimeout","parentLineHeight","parentLineToTop","child","spaceBetween","y","style","bottom","minHeight","toUpdate","minWidth","itemWidth","connectToInstance","lastlogicHash","settings","newHash","sha1","logic","afterMount","GraphPart"],"mappings":"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"}